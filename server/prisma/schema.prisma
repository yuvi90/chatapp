generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Roles {
  basic
  admin
}

enum LoginType {
  email
  google
  facebook
}

model Users {
  id                      String             @id @default(uuid())
  username                String             @unique
  email                   String             @unique
  password                String
  loginType               LoginType
  role                    Roles              @default(basic)
  isEmailVerified         Boolean            @default(false)
  emailVerificationExpiry DateTime?
  emailVerificationToken  String?
  resetPasswordExpiry     DateTime?
  resetPasswordToken      String?
  refreshToken            String?
  createdAt               DateTime           @default(now())
  updatedAt               DateTime           @updatedAt
  userProfile             UserProfile? // 1-1
  chatParticipants        ChatParticipants[] // 1-M
  sendMessages            ChatMessages[]     @relation("UserMessages") // 1-M

  @@index([email])
  @@index([username])
  @@index([createdAt, updatedAt])
}

model UserProfile {
  id        String @id @default(uuid())
  firstName String
  lastName  String
  avatar    Bytes?
  user      Users  @relation(fields: [userId], references: [id], onDelete: Cascade) // 1-1
  userId    String @unique

  @@index([firstName, lastName])
}

model Chats {
  id               String             @id @default(uuid())
  name             String?
  isGroupChat      Boolean            @default(false)
  lastMessageId    String?
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  messages         ChatMessages[]
  chatParticipants ChatParticipants[]

  @@index([isGroupChat, createdAt])
}

model ChatParticipants {
  id        String   @id @default(uuid())
  isAdmin   Boolean  @default(false)
  user      Users    @relation(fields: [userId], references: [id], onDelete: Cascade) // 1-M
  userId    String
  chat      Chats    @relation(fields: [chatId], references: [id], onDelete: Cascade) // 1-M
  chatId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([chatId, userId])
  @@index([chatId, userId])
}

model ChatMessages {
  id        String   @id @default(uuid())
  content   String
  sender    Users    @relation("UserMessages", fields: [senderId], references: [id], onDelete: Cascade) // 1-M
  senderId  String
  chat      Chats    @relation(fields: [chatId], references: [id], onDelete: Cascade) // 1-M
  chatId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([chatId, createdAt])
  @@index([senderId, createdAt])
}
