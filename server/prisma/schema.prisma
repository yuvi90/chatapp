generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  basic
  admin
}

enum LoginType {
  email
  google
  facebook
}

model User {
  id                      String            @id @default(uuid())
  username                String            @unique @db.VarChar(50)
  email                   String            @unique @db.VarChar(50)
  password                String
  loginType               LoginType         @map("login_type")
  role                    Role              @default(basic)
  refreshToken            String?           @map("refresh_token")
  isEmailVerified         Boolean           @default(false) @map("is_email_verified")
  emailVerificationToken  String?           @map("email_verification_token")
  emailVerificationExpiry DateTime?         @map("email_verification_expiry")
  resetPasswordToken      String?           @map("password_reset_token")
  resetPasswordExpiry     DateTime?         @map("password_reset_expiry")
  createdAt               DateTime          @default(now()) @map("created_at")
  updatedAt               DateTime          @updatedAt @map("updated_at")
  userProfile             UserProfile?
  chatParticipants        ChatParticipant[]
  sendMessages            ChatMessage[]     @relation("SenderMessages")
  receiveMessages         ChatMessage[]     @relation("ReceiverMessages")

  @@index([email])
  @@index([username])
  @@index([createdAt, updatedAt])
  @@map("users")
}

model UserProfile {
  id        String  @id @default(uuid())
  firstName String  @map("first_name") @db.VarChar(30)
  lastName  String  @map("last_name") @db.VarChar(30)
  avatar    String? @default("https://via.placeholder.com/200x200.png")
  userId    String  @unique @map("user_id")
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([firstName, lastName])
  @@map("user_profiles")
}

model Chat {
  id               String            @id @default(uuid())
  name             String?           @db.VarChar(50)
  isGroupChat      Boolean           @default(false) @map("is_group_chat")
  lastMessageId    String?           @map("last_message_id")
  createdAt        DateTime          @default(now()) @map("created_at")
  updatedAt        DateTime          @updatedAt @map("updated_at")
  messages         ChatMessage[]
  chatParticipants ChatParticipant[]

  @@index([isGroupChat, createdAt])
  @@map("chats")
}

model ChatParticipant {
  id        String   @id @default(uuid())
  isAdmin   Boolean  @default(false) @map("is_admin")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @map("user_id")
  chat      Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)
  chatId    String   @map("chat_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@unique([chatId, userId])
  @@index([chatId, userId])
  @@map("chat_participants")
}

model ChatMessage {
  id         String   @id @default(uuid())
  content    String
  sender     User     @relation("SenderMessages", fields: [senderId], references: [id], onDelete: Cascade)
  senderId   String   @map("sender_id")
  receiver   User     @relation("ReceiverMessages", fields: [receiverId], references: [id], onDelete: Cascade)
  receiverId String   @map("receiver_id")
  chat       Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)
  chatId     String   @map("chat_id")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  @@index([chatId, createdAt])
  @@index([senderId, createdAt])
  @@map("chat_messages")
}
